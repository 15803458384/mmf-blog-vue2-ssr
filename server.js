process.env.VUE_ENV = 'server'
const isProd = process.env.NODE_ENV === 'production'

const fs = require('fs')
const path = require('path')
const favicon = require('serve-favicon')
const express = require('express')
const compression = require('compression')
const serialize = require('serialize-javascript')
//const proxy = require('express-http-proxy')
const config = require('./src/api/config-server')
const resolve = file => path.resolve(__dirname, file)
const cookieParser = require('cookie-parser')
const bodyParser = require('body-parser')

require('./server/models/user')
require('./server/models/article')
require('./server/models/comment')

const routes = require('./server/routes/index')

function createRenderer(bundle) {
    // https://github.com/vuejs/vue/blob/next/packages/vue-server-renderer/README.md#why-use-bundlerenderer
    return require('vue-server-renderer').createBundleRenderer(bundle, {
        cache: require('lru-cache')({
            max: 1000,
            maxAge: 1000 * 60 * 15,
        })
    })
}

function parseIndex(template) {
    const contentMarker = '<!-- APP -->'
    const i = template.indexOf(contentMarker)
    return {
        head: template.slice(0, i),
        tail: template.slice(i + contentMarker.length),
    }
}

const app = express()

// generated by html-webpack-plugin
let indexHTML
// created from the webpack-generated server bundle
let renderer
if (isProd) {
    // in production: create server renderer and index HTML from real fs
    renderer = createRenderer(fs.readFileSync(resolve('./dist/server/server-bundle.js'), 'utf-8'))
    indexHTML = parseIndex(fs.readFileSync(resolve('./dist/server.html'), 'utf-8'))
} else {
    // in development: setup the dev server with watch and hot-reload,
    // and update renderer / index HTML on file change.
    require('./build/setup-dev-server')(app, {
        bundleUpdated: bundle => {
            renderer = createRenderer(bundle)
        },
        indexUpdated: index => {
            indexHTML = parseIndex(index)
        },
    })
}

const serve = (path, cache) => express.static(resolve(path), {
    maxAge: cache && isProd
        ? 60 * 60 * 24 * 30
        : 0
})

app.set('views', path.join(__dirname, 'dist'))
app.engine('.html', require('ejs').__express)
app.set('view engine', 'ejs')

app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: false }))
app.use(cookieParser())

app.use(favicon('./favicon.ico'))
app.use(compression({threshold: 0}))
app.use('/server', serve('./dist/server'))
app.use('/static', serve('./dist/static'))

app.use('/api', routes)

const r = (req, res) => {
    if (!renderer) {
        return res.end('waiting for compilation... refresh in a moment.')
    }

    res.setHeader("Content-Type", "text/html")
    var s = Date.now()
    const context = {
        url: req.url
    }
    const renderStream = renderer.renderToStream(context)

    renderStream.once('data', () => {
        res.write(indexHTML.head)
    })

    renderStream.on('data', chunk => {
        res.write(chunk)
    })

    renderStream.on('end', () => {
        // embed initial store state
        if (context.initialState) {
            res.write('<script>window.__INITIAL_STATE__=' + serialize(context.initialState, {isJSON: true}) + '</script>')
        }
        res.end(indexHTML.tail)
        console.log(`${req.url}: ${Date.now() - s}ms`)
    })
    renderStream.on('error', err => {
        if (err && err.code === '404') {
            res.status(404).end('404 | Page Not Found')
            return
        }
        // Render Error Page or Redirect
        res.status(500).end('Internal Error 500')
        console.error(`error during render : ${req.url}`)
        console.error(err)
    })
}

// 利用 express-http-proxy 做 api 反向代理
// if (!isProd) {
//     var apiProxy = proxy(config.proxy, {
//         forwardPath (req) {
//             return req._parsedUrl.path
//         }
//     })
//     app.use('/api**', apiProxy)
// }

app.get('/login', (req, res) => {
    res.render('login.html', { title: '登录' })
})
app.get(['/', '/category/:id', '/search/:qs', '/article/:id', '/admin/list/:page', '/admin/post', '/admin/edit/:id/:page'], (req, res) => {
    r(req, res)
})

app.use(function(req, res, next) {
    var err = new Error('Not Found')
    err.status = 404
    next(err)
})

app.use(function(err, req, res) {
    res.status(err.status || 500)
    res.send(err.message)
})

const port = process.env.PORT || config.port || 8080
app.listen(port, err => {
    if (err) {
        console.log(err)
        return
    }
    console.log(`server started at localhost:${port}`)
})
